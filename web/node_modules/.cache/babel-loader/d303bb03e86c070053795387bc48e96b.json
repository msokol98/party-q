{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\n\nconst PartyContainer = ({\n  member,\n  party\n}) => {\n  const [currentSong, setCurrentSong] = useState();\n\n  const getCurrentSong = () => {\n    if (!party || !party.host) return;\n    const token = party.host.token;\n    axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(response => {\n      const song = response.data.item;\n      console.log(song);\n      song && song.id !== currentSong.id && changeCurrentSong(song);\n    });\n  };\n\n  const changeCurrentSong = song => {\n    axios.post(`${apiHost}/api/songs/current`, song);\n  };\n\n  useEffect(() => {\n    if (member.id !== party.host.id) return;\n    const interval = setInterval(getCurrentSong, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Mobile, {\n    party: { ...party,\n      currentSong\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PartyContainer;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js"],"names":["React","useState","useEffect","Mobile","axios","apiHost","PartyContainer","member","party","currentSong","setCurrentSong","getCurrentSong","host","token","get","headers","then","response","song","data","item","console","log","id","changeCurrentSong","post","interval","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAuB;AAE1C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C;;AAEA,QAAMU,cAAc,GAAG,MAAM;AACzB,QAAG,CAACH,KAAD,IAAU,CAACA,KAAK,CAACI,IAApB,EAA0B;AAE1B,UAAMC,KAAK,GAAGL,KAAK,CAACI,IAAN,CAAWC,KAAzB;AACAT,IAAAA,KAAK,CAACU,GAAN,CAAU,wDAAV,EAAoE;AAChEC,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAYF;AADxB;AADuD,KAApE,EAIGG,IAJH,CAIQC,QAAQ,IAAI;AAChB,YAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAA,MAAAA,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYd,WAAW,CAACc,EAAhC,IAAsCC,iBAAiB,CAACN,IAAD,CAAvD;AACH,KARD;AASH,GAbD;;AAeA,QAAMM,iBAAiB,GAAGN,IAAI,IAAI;AAC9Bd,IAAAA,KAAK,CAACqB,IAAN,CAAY,GAAEpB,OAAQ,oBAAtB,EAA2Ca,IAA3C;AACH,GAFD;;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,MAAM,CAACgB,EAAP,KAAcf,KAAK,CAACI,IAAN,CAAWW,EAA5B,EAAgC;AAChC,UAAMG,QAAQ,GAAGC,WAAW,CAAChB,cAAD,EAAiB,IAAjB,CAA5B;AACA,WAAO,MAAMiB,aAAa,CAACF,QAAD,CAA1B;AACH,GAJQ,EAIN,EAJM,CAAT;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,EAAC,GAAGlB,KAAJ;AAAWC,MAAAA;AAAX,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAnCD;;AAqCA,eAAeH,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\n\nconst PartyContainer = ({ member, party }) => {\n\n    const [currentSong, setCurrentSong] = useState();\n\n    const getCurrentSong = () => {\n        if(!party || !party.host) return;\n\n        const token = party.host.token;\n        axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        }).then(response => {\n            const song = response.data.item;\n            console.log(song)\n            song && song.id !== currentSong.id && changeCurrentSong(song);\n        })\n    }\n\n    const changeCurrentSong = song => {\n        axios.post(`${apiHost}/api/songs/current`, song);\n    }\n\n    useEffect(() => {\n        if(member.id !== party.host.id) return;\n        const interval = setInterval(getCurrentSong, 2000);\n        return () => clearInterval(interval);\n    }, []);\n      \n\n    return(\n        <div>\n            <Mobile party={{...party, currentSong}} />\n        </div>\n    )\n}\n \nexport default PartyContainer;"]},"metadata":{},"sourceType":"module"}