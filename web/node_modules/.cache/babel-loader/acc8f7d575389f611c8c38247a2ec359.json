{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/Projects/party-q/web/src/components/party/active/mobile/tabs/AddSong/AddSongContainer.js\";\nimport { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport AddSong from './AddSong';\nimport axios from 'axios';\n\nclass AddSongContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      results: []\n    };\n\n    this.getResults = query => {\n      const {\n        member\n      } = this.props;\n\n      if (query === \"\") {\n        this.setState({\n          results: []\n        });\n        return;\n      }\n\n      axios.get(\"https://api.spotify.com/v1/search\", {\n        headers: {\n          'Authorization': 'Bearer ' + member.token\n        },\n        params: {\n          q: query,\n          type: \"track,album,artist\",\n          market: \"US\",\n          limit: 5\n        }\n      }).then(response => this.setState({\n        results: response.data.tracks.items\n      }));\n    };\n\n    this.addSong = song => {\n      addSongToHostPlaylist(song);\n      addSongToServerQueue(song);\n    };\n\n    this.addSongToHostPlaylist = song => {\n      const {\n        hostToken\n      } = this.props;\n      axios.post(\"https://api.spotify.com/v1/me/player/queue\", {}, {\n        headers: {\n          'Authorization': 'Bearer ' + party.host.token\n        },\n        params: {\n          uri: song.uri\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AddSong, {\n      addSong: this.addSong,\n      results: this.state.results,\n      getResults: this.getResults,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default AddSongContainer;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/components/party/active/mobile/tabs/AddSong/AddSongContainer.js"],"names":["render","React","Component","AddSong","axios","AddSongContainer","state","results","getResults","query","member","props","setState","get","headers","token","params","q","type","market","limit","then","response","data","tracks","items","addSong","song","addSongToHostPlaylist","addSongToServerQueue","hostToken","post","party","host","uri"],"mappings":";AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAN,SAA+BH,SAA/B,CAAyC;AAAA;AAAA;AAAA,SAErCI,KAFqC,GAE7B;AAACC,MAAAA,OAAO,EAAE;AAAV,KAF6B;;AAAA,SAIrCC,UAJqC,GAIxBC,KAAK,IAAI;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAa,KAAKC,KAAxB;;AAEA,UAAGF,KAAK,KAAK,EAAb,EAAiB;AACb,aAAKG,QAAL,CAAc;AAACL,UAAAA,OAAO,EAAE;AAAV,SAAd;AACA;AACH;;AAEDH,MAAAA,KAAK,CAACS,GAAN,CAAU,mCAAV,EAA+C;AAC3CC,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYJ,MAAM,CAACK;AAD/B,SADkC;AAI3CC,QAAAA,MAAM,EAAE;AACJC,UAAAA,CAAC,EAAER,KADC;AAEJS,UAAAA,IAAI,EAAE,oBAFF;AAGJC,UAAAA,MAAM,EAAE,IAHJ;AAIJC,UAAAA,KAAK,EAAE;AAJH;AAJmC,OAA/C,EAUGC,IAVH,CAUQC,QAAQ,IAAI,KAAKV,QAAL,CAAc;AAACL,QAAAA,OAAO,EAAEe,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBC;AAA/B,OAAd,CAVpB;AAWH,KAvBoC;;AAAA,SAyBrCC,OAzBqC,GAyB3BC,IAAI,IAAI;AACdC,MAAAA,qBAAqB,CAACD,IAAD,CAArB;AACAE,MAAAA,oBAAoB,CAACF,IAAD,CAApB;AACH,KA5BoC;;AAAA,SA8BrCC,qBA9BqC,GA8BbD,IAAI,IAAI;AAC5B,YAAM;AAAEG,QAAAA;AAAF,UAAe,KAAKnB,KAA1B;AAEAP,MAAAA,KAAK,CAAC2B,IAAN,CAAW,4CAAX,EAAyD,EAAzD,EAA6D;AACzDjB,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYkB,KAAK,CAACC,IAAN,CAAWlB;AADnC,SADgD;AAIzDC,QAAAA,MAAM,EAAE;AACJkB,UAAAA,GAAG,EAAEP,IAAI,CAACO;AADN;AAJiD,OAA7D;AAQH,KAzCoC;AAAA;;AA2CrClC,EAAAA,MAAM,GAAG;AACL,wBAAO,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAE,KAAK0B,OAAvB;AAAgC,MAAA,OAAO,EAAE,KAAKpB,KAAL,CAAWC,OAApD;AAA6D,MAAA,UAAU,EAAE,KAAKC,UAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AA7CoC;;AAgDzC,eAAeH,gBAAf","sourcesContent":["import { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport AddSong from './AddSong';\nimport axios from 'axios';\n\nclass AddSongContainer extends Component {\n\n    state = {results: []}\n\n    getResults = query => {\n        const { member } = this.props;\n\n        if(query === \"\") {\n            this.setState({results: []});\n            return;\n        }\n\n        axios.get(\"https://api.spotify.com/v1/search\", {\n            headers: {\n                'Authorization': 'Bearer ' + member.token\n            }, \n            params: {\n                q: query,\n                type: \"track,album,artist\",\n                market: \"US\",\n                limit: 5\n            }\n        }).then(response => this.setState({results: response.data.tracks.items}));\n    }\n\n    addSong = song => {\n        addSongToHostPlaylist(song);\n        addSongToServerQueue(song);\n    }\n\n    addSongToHostPlaylist = song => {\n        const { hostToken} = this.props;\n\n        axios.post(\"https://api.spotify.com/v1/me/player/queue\", {}, {\n            headers: {\n                'Authorization': 'Bearer ' + party.host.token\n            }, \n            params: {\n                uri: song.uri\n            }\n        });\n    }\n\n    render() {\n        return <AddSong addSong={this.addSong} results={this.state.results} getResults={this.getResults} />\n    }\n}\n \nexport default AddSongContainer;"]},"metadata":{},"sourceType":"module"}