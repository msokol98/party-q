{"ast":null,"code":"import _slicedToArray from\"/home/mitchell/Projects/party-q/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';// Hook\nfunction useWindowSize(){// Initialize state with undefined width/height so server and client renders match\n// Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\nvar _useState=useState({width:undefined,height:undefined}),_useState2=_slicedToArray(_useState,2),windowSize=_useState2[0],setWindowSize=_useState2[1];useEffect(function(){// Handler to call on window resize\nfunction handleResize(){// Set window width/height to state\nsetWindowSize({width:window.innerWidth,height:window.innerHeight});}// Add event listener\nwindow.addEventListener(\"resize\",handleResize);// Call handler right away so state gets updated with initial window size\nhandleResize();// Remove event listener on cleanup\nreturn function(){return window.removeEventListener(\"resize\",handleResize);};},[]);// Empty array ensures that effect is only run on mount\nreturn windowSize;}export default useWindowSize;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/hooks/useWindowSize.js"],"names":["useState","useEffect","useWindowSize","width","undefined","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":"0JAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA,QAASC,CAAAA,aAAT,EAAyB,CACvB;AACA;AAFuB,cAGaF,QAAQ,CAAC,CAC3CG,KAAK,CAAEC,SADoC,CAE3CC,MAAM,CAAED,SAFmC,CAAD,CAHrB,wCAGhBE,UAHgB,eAGJC,aAHI,eAQvBN,SAAS,CAAC,UAAM,CACd;AACA,QAASO,CAAAA,YAAT,EAAwB,CACtB;AACAD,aAAa,CAAC,CACZJ,KAAK,CAAEM,MAAM,CAACC,UADF,CAEZL,MAAM,CAAEI,MAAM,CAACE,WAFH,CAAD,CAAb,CAID,CAED;AACAF,MAAM,CAACG,gBAAP,CAAwB,QAAxB,CAAkCJ,YAAlC,EAEA;AACAA,YAAY,GAEZ;AACA,MAAO,kBAAMC,CAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,CAAqCL,YAArC,CAAN,EAAP,CACD,CAlBQ,CAkBN,EAlBM,CAAT,CAkBQ;AAER,MAAOF,CAAAA,UAAP,CACD,CAED,cAAeJ,CAAAA,aAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\n// Hook\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    \n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    \n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    \n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nexport default useWindowSize;"]},"metadata":{},"sourceType":"module"}