{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/Projects/party-q/web/src/components/party/active/mobile/tabs/AddSong/AddSongContainer.js\";\nimport React, { Component } from 'react';\nimport AddSong from './AddSong';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport useFormatSong from 'hooks/useFormatSong';\n\nclass AddSongContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      results: []\n    };\n\n    this.getResults = query => {\n      const {\n        member\n      } = this.props;\n\n      if (query === \"\") {\n        this.setState({\n          results: []\n        });\n        return;\n      }\n\n      axios.get(\"https://api.spotify.com/v1/search\", {\n        headers: {\n          'Authorization': 'Bearer ' + member.token\n        },\n        params: {\n          q: query,\n          type: \"track,album,artist\",\n          market: \"US\",\n          limit: 5\n        }\n      }).then(response => this.setState({\n        results: response.data.tracks.items\n      }));\n    };\n\n    this.addSong = song => {\n      const {\n        partyId\n      } = this.props;\n      this.addSongToHostPlaylist(song);\n      this.addSongToServerQueue(song);\n    };\n\n    this.addSongToHostPlaylist = song => {\n      const {\n        hostToken,\n        partyId\n      } = this.props;\n      axios.post(\"https://api.spotify.com/v1/me/player/queue\", {}, {\n        headers: {\n          'Authorization': 'Bearer ' + hostToken\n        },\n        params: {\n          uri: song.uri\n        }\n      });\n    };\n\n    this.addSongToServerQueue = song => axios.post(`${apiHost}/api/songs/add?partyId=${this.props.partyId}`, useFormatSong(song));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AddSong, {\n      addSong: this.addSong,\n      results: this.state.results,\n      getResults: this.getResults,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default AddSongContainer;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/components/party/active/mobile/tabs/AddSong/AddSongContainer.js"],"names":["React","Component","AddSong","axios","apiHost","useFormatSong","AddSongContainer","state","results","getResults","query","member","props","setState","get","headers","token","params","q","type","market","limit","then","response","data","tracks","items","addSong","song","partyId","addSongToHostPlaylist","addSongToServerQueue","hostToken","post","uri","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;;AAEA,MAAMC,gBAAN,SAA+BL,SAA/B,CAAyC;AAAA;AAAA;AAAA,SAErCM,KAFqC,GAE7B;AAACC,MAAAA,OAAO,EAAE;AAAV,KAF6B;;AAAA,SAIrCC,UAJqC,GAIxBC,KAAK,IAAI;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAa,KAAKC,KAAxB;;AAEA,UAAGF,KAAK,KAAK,EAAb,EAAiB;AACb,aAAKG,QAAL,CAAc;AAACL,UAAAA,OAAO,EAAE;AAAV,SAAd;AACA;AACH;;AAEDL,MAAAA,KAAK,CAACW,GAAN,CAAU,mCAAV,EAA+C;AAC3CC,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYJ,MAAM,CAACK;AAD/B,SADkC;AAI3CC,QAAAA,MAAM,EAAE;AACJC,UAAAA,CAAC,EAAER,KADC;AAEJS,UAAAA,IAAI,EAAE,oBAFF;AAGJC,UAAAA,MAAM,EAAE,IAHJ;AAIJC,UAAAA,KAAK,EAAE;AAJH;AAJmC,OAA/C,EAUGC,IAVH,CAUQC,QAAQ,IAAI,KAAKV,QAAL,CAAc;AAACL,QAAAA,OAAO,EAAEe,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBC;AAA/B,OAAd,CAVpB;AAWH,KAvBoC;;AAAA,SAyBrCC,OAzBqC,GAyB3BC,IAAI,IAAI;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAc,KAAKjB,KAAzB;AACA,WAAKkB,qBAAL,CAA2BF,IAA3B;AACA,WAAKG,oBAAL,CAA0BH,IAA1B;AACH,KA7BoC;;AAAA,SA+BrCE,qBA/BqC,GA+BbF,IAAI,IAAI;AAC5B,YAAM;AAAEI,QAAAA,SAAF;AAAaH,QAAAA;AAAb,UAAyB,KAAKjB,KAApC;AAEAT,MAAAA,KAAK,CAAC8B,IAAN,CAAW,4CAAX,EAAyD,EAAzD,EAA6D;AACzDlB,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAYiB;AADxB,SADgD;AAIzDf,QAAAA,MAAM,EAAE;AACJiB,UAAAA,GAAG,EAAEN,IAAI,CAACM;AADN;AAJiD,OAA7D;AAQH,KA1CoC;;AAAA,SA4CrCH,oBA5CqC,GA4CdH,IAAI,IAAIzB,KAAK,CAAC8B,IAAN,CAAY,GAAE7B,OAAQ,0BAAyB,KAAKQ,KAAL,CAAWiB,OAAQ,EAAlE,EAAqExB,aAAa,CAACuB,IAAD,CAAlF,CA5CM;AAAA;;AA8CrCO,EAAAA,MAAM,GAAG;AACL,wBAAO,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAE,KAAKR,OAAvB;AAAgC,MAAA,OAAO,EAAE,KAAKpB,KAAL,CAAWC,OAApD;AAA6D,MAAA,UAAU,EAAE,KAAKC,UAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAhDoC;;AAmDzC,eAAeH,gBAAf","sourcesContent":["import React, { Component } from 'react';\nimport AddSong from './AddSong';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport useFormatSong from 'hooks/useFormatSong';\n\nclass AddSongContainer extends Component {\n\n    state = {results: []}\n\n    getResults = query => {\n        const { member } = this.props;\n\n        if(query === \"\") {\n            this.setState({results: []});\n            return;\n        }\n\n        axios.get(\"https://api.spotify.com/v1/search\", {\n            headers: {\n                'Authorization': 'Bearer ' + member.token\n            }, \n            params: {\n                q: query,\n                type: \"track,album,artist\",\n                market: \"US\",\n                limit: 5\n            }\n        }).then(response => this.setState({results: response.data.tracks.items}));\n    }\n\n    addSong = song => {\n        const { partyId } = this.props;\n        this.addSongToHostPlaylist(song);\n        this.addSongToServerQueue(song);\n    }\n\n    addSongToHostPlaylist = song => {\n        const { hostToken, partyId } = this.props;\n\n        axios.post(\"https://api.spotify.com/v1/me/player/queue\", {}, {\n            headers: {\n                'Authorization': 'Bearer ' + hostToken\n            }, \n            params: {\n                uri: song.uri\n            }\n        });\n    }\n\n    addSongToServerQueue = song => axios.post(`${apiHost}/api/songs/add?partyId=${this.props.partyId}`, useFormatSong(song))\n\n    render() {\n        return <AddSong addSong={this.addSong} results={this.state.results} getResults={this.getResults} />\n    }\n}\n \nexport default AddSongContainer;"]},"metadata":{},"sourceType":"module"}