{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\n\nconst PartyContainer = ({\n  member,\n  party\n}) => {\n  console.log(\"re-rendering....\");\n  const [currentSong, setCurrentSong] = useState(localStorage.getItem('song'));\n\n  const getCurrentSong = () => {\n    if (!party || !party.host) return;\n    const token = party.host.token;\n    axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(response => {\n      const song = response.data.item;\n      console.log(song);\n      if (!song) return;\n      console.log(currentSong);\n      if (currentSong) console.log(\"current: \" + currentSong.id);\n      if (song) console.log(\"new : \" + song.id);\n      song && (!currentSong || song.id !== currentSong.id) && changeCurrentSong(song);\n    });\n  };\n\n  const changeCurrentSong = song => {\n    setCurrentSong(song);\n    axios.post(`${apiHost}/api/songs/current?partyId=${party.id}`, {\n      artist: song.artists && song.artists[0] && song.artists[0].name,\n      imageURI: song.album && song.album.images && song.album.images[0] && song.album.images[0].url.song && song.name\n    });\n  };\n\n  useEffect(() => {\n    if (member.id !== party.host.id) return;\n    const interval = setInterval(getCurrentSong, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Mobile, {\n    party: { ...party,\n      currentSong\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PartyContainer;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js"],"names":["React","useState","useEffect","Mobile","axios","apiHost","PartyContainer","member","party","console","log","currentSong","setCurrentSong","localStorage","getItem","getCurrentSong","host","token","get","headers","then","response","song","data","item","id","changeCurrentSong","post","artist","artists","name","imageURI","album","images","url","interval","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAuB;AAE1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAACY,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAD,CAA9C;;AAEA,QAAMC,cAAc,GAAG,MAAM;AACzB,QAAG,CAACP,KAAD,IAAU,CAACA,KAAK,CAACQ,IAApB,EAA0B;AAE1B,UAAMC,KAAK,GAAGT,KAAK,CAACQ,IAAN,CAAWC,KAAzB;AACAb,IAAAA,KAAK,CAACc,GAAN,CAAU,wDAAV,EAAoE;AAChEC,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAYF;AADxB;AADuD,KAApE,EAIGG,IAJH,CAIQC,QAAQ,IAAI;AAChB,YAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAA3B;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ;AAEA,UAAG,CAACA,IAAJ,EAAU;AAEVb,MAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ;AAEA,UAAGA,WAAH,EAAgBF,OAAO,CAACC,GAAR,CAAY,cAAcC,WAAW,CAACc,EAAtC;AAChB,UAAGH,IAAH,EAASb,OAAO,CAACC,GAAR,CAAY,WAAWY,IAAI,CAACG,EAA5B;AAETH,MAAAA,IAAI,KAAK,CAACX,WAAD,IAAgBW,IAAI,CAACG,EAAL,KAAYd,WAAW,CAACc,EAA7C,CAAJ,IAAwDC,iBAAiB,CAACJ,IAAD,CAAzE;AACH,KAhBD;AAiBH,GArBD;;AAuBA,QAAMI,iBAAiB,GAAGJ,IAAI,IAAI;AAC9BV,IAAAA,cAAc,CAACU,IAAD,CAAd;AAEAlB,IAAAA,KAAK,CAACuB,IAAN,CAAY,GAAEtB,OAAQ,8BAA6BG,KAAK,CAACiB,EAAG,EAA5D,EAA+D;AAC3DG,MAAAA,MAAM,EAAEN,IAAI,CAACO,OAAL,IAAgBP,IAAI,CAACO,OAAL,CAAa,CAAb,CAAhB,IAAmCP,IAAI,CAACO,OAAL,CAAa,CAAb,EAAgBC,IADA;AAE3DC,MAAAA,QAAQ,EAAET,IAAI,CAACU,KAAL,IAAcV,IAAI,CAACU,KAAL,CAAWC,MAAzB,IAAmCX,IAAI,CAACU,KAAL,CAAWC,MAAX,CAAkB,CAAlB,CAAnC,IAA2DX,IAAI,CAACU,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBC,GAArB,CACrEZ,IADU,IACFA,IAAI,CAACQ;AAH8C,KAA/D;AAKH,GARD;;AAUA5B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,MAAM,CAACkB,EAAP,KAAcjB,KAAK,CAACQ,IAAN,CAAWS,EAA5B,EAAgC;AAChC,UAAMU,QAAQ,GAAGC,WAAW,CAACrB,cAAD,EAAiB,IAAjB,CAA5B;AACA,WAAO,MAAMsB,aAAa,CAACF,QAAD,CAA1B;AACH,GAJQ,EAIN,EAJM,CAAT;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,EAAC,GAAG3B,KAAJ;AAAWG,MAAAA;AAAX,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAnDD;;AAqDA,eAAeL,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\n\nconst PartyContainer = ({ member, party }) => {\n\n    console.log(\"re-rendering....\")\n\n    const [currentSong, setCurrentSong] = useState(localStorage.getItem('song'));\n\n    const getCurrentSong = () => {\n        if(!party || !party.host) return;\n\n        const token = party.host.token;\n        axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        }).then(response => {\n            const song = response.data.item;\n            console.log(song)\n\n            if(!song) return;\n\n            console.log(currentSong)\n\n            if(currentSong) console.log(\"current: \" + currentSong.id)\n            if(song) console.log(\"new : \" + song.id)\n\n            song && (!currentSong || song.id !== currentSong.id) && changeCurrentSong(song);\n        })\n    }\n\n    const changeCurrentSong = song => {\n        setCurrentSong(song);\n\n        axios.post(`${apiHost}/api/songs/current?partyId=${party.id}`, {\n            artist: song.artists && song.artists[0] && song.artists[0].name,\n            imageURI: song.album && song.album.images && song.album.images[0] && song.album.images[0].url.\n            song && song.name\n        });\n    }\n\n    useEffect(() => {\n        if(member.id !== party.host.id) return;\n        const interval = setInterval(getCurrentSong, 2000);\n        return () => clearInterval(interval);\n    }, []);\n      \n\n    return(\n        <div>\n            <Mobile party={{...party, currentSong}} />\n        </div>\n    )\n}\n \nexport default PartyContainer;"]},"metadata":{},"sourceType":"module"}