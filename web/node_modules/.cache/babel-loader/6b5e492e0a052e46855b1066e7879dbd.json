{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\n\nconst PartyContainer = ({\n  member,\n  party\n}) => {\n  const currentSong = localStorage.getItem('song');\n\n  const getCurrentSong = () => {\n    if (!party || !party.host) return;\n    const token = party.host.token;\n    axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(response => {\n      const song = response.data.item;\n      if (!song) return;\n      if (currentSong && song) console.log(currentSong.id === song.id);\n      song && (!currentSong || song.id !== currentSong.id) && changeCurrentSong(song);\n    });\n  };\n\n  const changeCurrentSong = song => {\n    localStorage.setItem('song', JSON.stringify(song));\n    axios.post(`${apiHost}/api/songs/current?partyId=${party.id}`, {\n      artist: song.artists && song.artists[0] && song.artists[0].name,\n      imageURI: song.album && song.album.images && song.album.images[0] && song.album.images[0].url.song && song.name\n    });\n  };\n\n  useEffect(() => {\n    if (member.id !== party.host.id) return;\n    const interval = setInterval(getCurrentSong, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Mobile, {\n    party: { ...party,\n      currentSong\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PartyContainer;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js"],"names":["React","useState","useEffect","Mobile","axios","apiHost","PartyContainer","member","party","currentSong","localStorage","getItem","getCurrentSong","host","token","get","headers","then","response","song","data","item","console","log","id","changeCurrentSong","setItem","JSON","stringify","post","artist","artists","name","imageURI","album","images","url","interval","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAuB;AAE1C,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAApB;;AAEA,QAAMC,cAAc,GAAG,MAAM;AACzB,QAAG,CAACJ,KAAD,IAAU,CAACA,KAAK,CAACK,IAApB,EAA0B;AAE1B,UAAMC,KAAK,GAAGN,KAAK,CAACK,IAAN,CAAWC,KAAzB;AACAV,IAAAA,KAAK,CAACW,GAAN,CAAU,wDAAV,EAAoE;AAChEC,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAYF;AADxB;AADuD,KAApE,EAIGG,IAJH,CAIQC,QAAQ,IAAI;AAChB,YAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAA3B;AAEA,UAAG,CAACF,IAAJ,EAAU;AAEV,UAAGV,WAAW,IAAIU,IAAlB,EAAwBG,OAAO,CAACC,GAAR,CAAYd,WAAW,CAACe,EAAZ,KAAmBL,IAAI,CAACK,EAApC;AAExBL,MAAAA,IAAI,KAAK,CAACV,WAAD,IAAgBU,IAAI,CAACK,EAAL,KAAYf,WAAW,CAACe,EAA7C,CAAJ,IAAwDC,iBAAiB,CAACN,IAAD,CAAzE;AACH,KAZD;AAaH,GAjBD;;AAmBA,QAAMM,iBAAiB,GAAGN,IAAI,IAAI;AAC9BT,IAAAA,YAAY,CAACgB,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAA7B;AAEAf,IAAAA,KAAK,CAACyB,IAAN,CAAY,GAAExB,OAAQ,8BAA6BG,KAAK,CAACgB,EAAG,EAA5D,EAA+D;AAC3DM,MAAAA,MAAM,EAAEX,IAAI,CAACY,OAAL,IAAgBZ,IAAI,CAACY,OAAL,CAAa,CAAb,CAAhB,IAAmCZ,IAAI,CAACY,OAAL,CAAa,CAAb,EAAgBC,IADA;AAE3DC,MAAAA,QAAQ,EAAEd,IAAI,CAACe,KAAL,IAAcf,IAAI,CAACe,KAAL,CAAWC,MAAzB,IAAmChB,IAAI,CAACe,KAAL,CAAWC,MAAX,CAAkB,CAAlB,CAAnC,IAA2DhB,IAAI,CAACe,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBC,GAArB,CACrEjB,IADU,IACFA,IAAI,CAACa;AAH8C,KAA/D;AAKH,GARD;;AAUA9B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,MAAM,CAACiB,EAAP,KAAchB,KAAK,CAACK,IAAN,CAAWW,EAA5B,EAAgC;AAChC,UAAMa,QAAQ,GAAGC,WAAW,CAAC1B,cAAD,EAAiB,IAAjB,CAA5B;AACA,WAAO,MAAM2B,aAAa,CAACF,QAAD,CAA1B;AACH,GAJQ,EAIN,EAJM,CAAT;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,EAAC,GAAG7B,KAAJ;AAAWC,MAAAA;AAAX,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CA7CD;;AA+CA,eAAeH,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\n\nconst PartyContainer = ({ member, party }) => {\n\n    const currentSong = localStorage.getItem('song');\n\n    const getCurrentSong = () => {\n        if(!party || !party.host) return;\n\n        const token = party.host.token;\n        axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        }).then(response => {\n            const song = response.data.item;\n\n            if(!song) return;\n\n            if(currentSong && song) console.log(currentSong.id === song.id) \n\n            song && (!currentSong || song.id !== currentSong.id) && changeCurrentSong(song);\n        })\n    }\n\n    const changeCurrentSong = song => {\n        localStorage.setItem('song', JSON.stringify(song));\n\n        axios.post(`${apiHost}/api/songs/current?partyId=${party.id}`, {\n            artist: song.artists && song.artists[0] && song.artists[0].name,\n            imageURI: song.album && song.album.images && song.album.images[0] && song.album.images[0].url.\n            song && song.name\n        });\n    }\n\n    useEffect(() => {\n        if(member.id !== party.host.id) return;\n        const interval = setInterval(getCurrentSong, 2000);\n        return () => clearInterval(interval);\n    }, []);\n      \n\n    return(\n        <div>\n            <Mobile party={{...party, currentSong}} />\n        </div>\n    )\n}\n \nexport default PartyContainer;"]},"metadata":{},"sourceType":"module"}