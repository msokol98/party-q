{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/Projects/party-q/web/src/components/party/active/mobile/tabs/AddSong/AddSongContainer.js\";\nimport React, { Component } from 'react';\nimport AddSong from './AddSong';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport useFormatSong from 'hooks/useFormatSong';\n\nclass AddSongContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      results: [],\n      addedSong: false\n    };\n\n    this.getResults = query => {\n      const {\n        member\n      } = this.props;\n\n      if (query === \"\") {\n        this.setState({\n          results: []\n        });\n        return;\n      }\n\n      let cancel;\n      axios.get(\"https://api.spotify.com/v1/search\", {\n        headers: {\n          'Authorization': 'Bearer ' + member.token\n        },\n        params: {\n          q: query,\n          type: \"track,album,artist\",\n          market: \"US\",\n          limit: 5\n        },\n        cancelToken: new axios.CancelToken(c => cancel = c)\n      }).then(response => this.setState({\n        results: response.data.tracks.items\n      }));\n    };\n\n    this.addSong = song => {\n      this.setState({\n        addedSong: true\n      });\n      const {\n        partyId,\n        hostToken,\n        member\n      } = this.props;\n      this.addSongToHostPlaylist(song, hostToken);\n      this.addSongToServerQueue(song, partyId, member.name);\n    };\n\n    this.addSongToHostPlaylist = (song, hostToken) => {\n      axios.post(\"https://api.spotify.com/v1/me/player/queue\", {}, {\n        headers: {\n          'Authorization': 'Bearer ' + hostToken\n        },\n        params: {\n          uri: song.uri\n        }\n      });\n    };\n\n    this.addSongToServerQueue = (song, partyId, picker) => axios.post(`${apiHost}/api/songs/add?partyId=${partyId}`, {\n      picker,\n      ...useFormatSong(song)\n    });\n  }\n\n  render() {\n    const {\n      addedSong,\n      results\n    } = this.state;\n    if (addedSong) this.props.resetTab();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add-song-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AddSong, {\n      addSong: this.addSong,\n      results: results,\n      getResults: this.getResults,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default AddSongContainer;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/components/party/active/mobile/tabs/AddSong/AddSongContainer.js"],"names":["React","Component","AddSong","axios","apiHost","useFormatSong","AddSongContainer","state","results","addedSong","getResults","query","member","props","setState","cancel","get","headers","token","params","q","type","market","limit","cancelToken","CancelToken","c","then","response","data","tracks","items","addSong","song","partyId","hostToken","addSongToHostPlaylist","addSongToServerQueue","name","post","uri","picker","render","resetTab"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport AddSong from './AddSong';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport useFormatSong from 'hooks/useFormatSong';\n\nclass AddSongContainer extends Component {\n\n    state = {results: [], addedSong: false}\n\n    getResults = query => {\n        const { member } = this.props;\n\n        if(query === \"\") {\n            this.setState({results: []});\n            return;\n        }\n\n        let cancel;\n\n        axios.get(\"https://api.spotify.com/v1/search\", {\n            headers: {\n                'Authorization': 'Bearer ' + member.token\n            }, \n            params: {\n                q: query,\n                type: \"track,album,artist\",\n                market: \"US\",\n                limit: 5\n            },\n            cancelToken: new axios.CancelToken(c => cancel = c)\n        }).then(response => this.setState({results: response.data.tracks.items}))\n\n    }\n\n    addSong = song => {\n        this.setState({addedSong: true});\n\n        const { partyId, hostToken, member } = this.props;\n        this.addSongToHostPlaylist(song, hostToken);\n        this.addSongToServerQueue(song, partyId, member.name);\n    }\n\n    addSongToHostPlaylist = (song, hostToken) => {\n        axios.post(\"https://api.spotify.com/v1/me/player/queue\", {}, {\n            headers: {\n                'Authorization': 'Bearer ' + hostToken\n            }, \n            params: {\n                uri: song.uri\n            }\n        });\n    }\n\n    addSongToServerQueue = (song, partyId, picker) => axios.post(`${apiHost}/api/songs/add?partyId=${partyId}`, {picker, ...useFormatSong(song)});\n\n    render() {\n        const { addedSong, results } = this.state;\n\n        if(addedSong) this.props.resetTab(); \n        \n\n        return(\n            <div className=\"add-song-wrapper\">\n                <AddSong addSong={this.addSong} results={results} getResults={this.getResults} />\n            </div>\n        )\n    }\n}\n \nexport default AddSongContainer;"]},"metadata":{},"sourceType":"module"}