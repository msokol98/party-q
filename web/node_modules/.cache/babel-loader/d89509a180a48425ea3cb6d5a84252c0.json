{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/Projects/party-q/web/src/components/party/PartyContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport HasNoParty from './HasNoParty';\nimport Party from './';\n\nconst PartyContainer = ({\n  member\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [hasParty, setHasParty] = useState();\n  const [party, setParty] = useState();\n\n  const fetchHasParty = () => {\n    axios.get(`${apiHost}/api/parties/exists`, {\n      params: {\n        memberId: member.id\n      }\n    }).then(response => {\n      setHasParty(response.data);\n      setLoading(false);\n    });\n  };\n\n  const fetchParty = () => {\n    hasParty && axios.get(`${apiHost}/api/parties`, {\n      params: {\n        memberId: member.id\n      }\n    }).then(response => setParty(response.data));\n  };\n\n  useEffect(fetchHasParty, []);\n  useEffect(fetchParty, [hasParty]);\n  if (loading) return /*#__PURE__*/React.createElement(React.Fragment, null);\n  if (!hasParty) return /*#__PURE__*/React.createElement(HasNoParty, {\n    member: member,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 26\n    }\n  });\n  if (!party) return /*#__PURE__*/React.createElement(React.Fragment, null);\n  return /*#__PURE__*/React.createElement(Party, {\n    member: member,\n    party: party,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }\n  });\n};\n\nexport default PartyContainer;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/components/party/PartyContainer.js"],"names":["React","useState","useEffect","axios","apiHost","HasNoParty","Party","PartyContainer","member","loading","setLoading","hasParty","setHasParty","party","setParty","fetchHasParty","get","params","memberId","id","then","response","data","fetchParty"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,IAAlB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAEnC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,EAAxC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,EAAlC;;AAEA,QAAMc,aAAa,GAAG,MAAM;AACxBZ,IAAAA,KAAK,CAACa,GAAN,CAAW,GAAEZ,OAAQ,qBAArB,EAA2C;AACvCa,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEV,MAAM,CAACW;AAAlB;AAD+B,KAA3C,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAAET,MAAAA,WAAW,CAACS,QAAQ,CAACC,IAAV,CAAX;AAA4BZ,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAmB,KAFrE;AAGH,GAJD;;AAMA,QAAMa,UAAU,GAAG,MAAM;AACrBZ,IAAAA,QAAQ,IAAIR,KAAK,CAACa,GAAN,CAAW,GAAEZ,OAAQ,cAArB,EAAoC;AAC5Ca,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEV,MAAM,CAACW;AAAlB;AADoC,KAApC,EAETC,IAFS,CAEJC,QAAQ,IAAIP,QAAQ,CAACO,QAAQ,CAACC,IAAV,CAFhB,CAAZ;AAGH,GAJD;;AAMApB,EAAAA,SAAS,CAACa,aAAD,EAAgB,EAAhB,CAAT;AACAb,EAAAA,SAAS,CAACqB,UAAD,EAAa,CAACZ,QAAD,CAAb,CAAT;AAEA,MAAGF,OAAH,EAAY,oBAAO,yCAAP;AAEZ,MAAG,CAACE,QAAJ,EAAc,oBAAO,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEH,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEd,MAAG,CAACK,KAAJ,EAAW,oBAAO,yCAAP;AAEX,sBAAO,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEL,MAAf;AAAuB,IAAA,KAAK,EAAEK,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEH,CA7BD;;AA+BA,eAAeN,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport HasNoParty from './HasNoParty';\nimport Party from './'\n\nconst PartyContainer = ({ member }) => {\n\n    const [loading, setLoading] = useState(true);\n    const [hasParty, setHasParty] = useState();\n    const [party, setParty] = useState();\n\n    const fetchHasParty = () => {\n        axios.get(`${apiHost}/api/parties/exists`, {\n            params: {memberId: member.id}\n        }).then(response => { setHasParty(response.data); setLoading(false) })\n    }\n\n    const fetchParty = () => {\n        hasParty && axios.get(`${apiHost}/api/parties`, {\n            params: {memberId: member.id}\n        }).then(response => setParty(response.data))\n    }\n\n    useEffect(fetchHasParty, []);\n    useEffect(fetchParty, [hasParty]);\n\n    if(loading) return <></>;\n\n    if(!hasParty) return <HasNoParty member={member} />\n\n    if(!party) return <></>;\n\n    return <Party member={member} party={party} />\n\n}\n \nexport default PartyContainer;"]},"metadata":{},"sourceType":"module"}