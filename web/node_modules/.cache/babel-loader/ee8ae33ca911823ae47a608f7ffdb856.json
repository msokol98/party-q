{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\n\nconst PartyContainer = ({\n  member,\n  party\n}) => {\n  const currentSong = JSON.parse(localStorage.getItem('song'));\n  const [cs, setCS] = useState(currentSong);\n  console.log(\"re-rendering)\");\n\n  const getCurrentSong = () => {\n    if (!party || !party.host) return;\n    const token = party.host.token;\n    axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(response => {\n      const song = response.data.item;\n      if (!song) return;\n      if (currentSong && song) console.log(currentSong.id === song.id);\n      song && (!currentSong || song.id !== currentSong.id) && changeCurrentSong(song);\n    });\n  };\n\n  const changeCurrentSong = song => {\n    localStorage.setItem('song', JSON.stringify(song));\n    axios.post(`${apiHost}/api/songs/current?partyId=${party.id}`, {\n      artist: song.artists && song.artists[0] && song.artists[0].name,\n      imageURI: song.album && song.album.images && song.album.images[0] && song.album.images[0].url.song && song.name\n    });\n  };\n\n  useEffect(() => {\n    if (member.id !== party.host.id) return;\n    const interval = setInterval(getCurrentSong, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Mobile, {\n    party: { ...party,\n      currentSong\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PartyContainer;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js"],"names":["React","useState","useEffect","Mobile","axios","apiHost","PartyContainer","member","party","currentSong","JSON","parse","localStorage","getItem","cs","setCS","console","log","getCurrentSong","host","token","get","headers","then","response","song","data","item","id","changeCurrentSong","setItem","stringify","post","artist","artists","name","imageURI","album","images","url","interval","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAuB;AAE1C,QAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAApB;AACA,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcd,QAAQ,CAACQ,WAAD,CAA5B;AAEAO,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AAEA,QAAMC,cAAc,GAAG,MAAM;AACzB,QAAG,CAACV,KAAD,IAAU,CAACA,KAAK,CAACW,IAApB,EAA0B;AAE1B,UAAMC,KAAK,GAAGZ,KAAK,CAACW,IAAN,CAAWC,KAAzB;AACAhB,IAAAA,KAAK,CAACiB,GAAN,CAAU,wDAAV,EAAoE;AAChEC,MAAAA,OAAO,EAAE;AACL,yBAAiB,YAAYF;AADxB;AADuD,KAApE,EAIGG,IAJH,CAIQC,QAAQ,IAAI;AAChB,YAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAA3B;AAEA,UAAG,CAACF,IAAJ,EAAU;AAEV,UAAGhB,WAAW,IAAIgB,IAAlB,EAAwBT,OAAO,CAACC,GAAR,CAAYR,WAAW,CAACmB,EAAZ,KAAmBH,IAAI,CAACG,EAApC;AAExBH,MAAAA,IAAI,KAAK,CAAChB,WAAD,IAAgBgB,IAAI,CAACG,EAAL,KAAYnB,WAAW,CAACmB,EAA7C,CAAJ,IAAwDC,iBAAiB,CAACJ,IAAD,CAAzE;AACH,KAZD;AAaH,GAjBD;;AAmBA,QAAMI,iBAAiB,GAAGJ,IAAI,IAAI;AAC9Bb,IAAAA,YAAY,CAACkB,OAAb,CAAqB,MAArB,EAA6BpB,IAAI,CAACqB,SAAL,CAAeN,IAAf,CAA7B;AAEArB,IAAAA,KAAK,CAAC4B,IAAN,CAAY,GAAE3B,OAAQ,8BAA6BG,KAAK,CAACoB,EAAG,EAA5D,EAA+D;AAC3DK,MAAAA,MAAM,EAAER,IAAI,CAACS,OAAL,IAAgBT,IAAI,CAACS,OAAL,CAAa,CAAb,CAAhB,IAAmCT,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBC,IADA;AAE3DC,MAAAA,QAAQ,EAAEX,IAAI,CAACY,KAAL,IAAcZ,IAAI,CAACY,KAAL,CAAWC,MAAzB,IAAmCb,IAAI,CAACY,KAAL,CAAWC,MAAX,CAAkB,CAAlB,CAAnC,IAA2Db,IAAI,CAACY,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBC,GAArB,CACrEd,IADU,IACFA,IAAI,CAACU;AAH8C,KAA/D;AAKH,GARD;;AAUAjC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,MAAM,CAACqB,EAAP,KAAcpB,KAAK,CAACW,IAAN,CAAWS,EAA5B,EAAgC;AAChC,UAAMY,QAAQ,GAAGC,WAAW,CAACvB,cAAD,EAAiB,IAAjB,CAA5B;AACA,WAAO,MAAMwB,aAAa,CAACF,QAAD,CAA1B;AACH,GAJQ,EAIN,EAJM,CAAT;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,EAAC,GAAGhC,KAAJ;AAAWC,MAAAA;AAAX,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAhDD;;AAkDA,eAAeH,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\n\nconst PartyContainer = ({ member, party }) => {\n\n    const currentSong = JSON.parse(localStorage.getItem('song'));\n    const [cs, setCS] = useState(currentSong);\n\n    console.log(\"re-rendering)\");\n\n    const getCurrentSong = () => {\n        if(!party || !party.host) return;\n\n        const token = party.host.token;\n        axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        }).then(response => {\n            const song = response.data.item;\n\n            if(!song) return;\n\n            if(currentSong && song) console.log(currentSong.id === song.id) \n\n            song && (!currentSong || song.id !== currentSong.id) && changeCurrentSong(song);\n        })\n    }\n\n    const changeCurrentSong = song => {\n        localStorage.setItem('song', JSON.stringify(song));\n\n        axios.post(`${apiHost}/api/songs/current?partyId=${party.id}`, {\n            artist: song.artists && song.artists[0] && song.artists[0].name,\n            imageURI: song.album && song.album.images && song.album.images[0] && song.album.images[0].url.\n            song && song.name\n        });\n    }\n\n    useEffect(() => {\n        if(member.id !== party.host.id) return;\n        const interval = setInterval(getCurrentSong, 2000);\n        return () => clearInterval(interval);\n    }, []);\n      \n\n    return(\n        <div>\n            <Mobile party={{...party, currentSong}} />\n        </div>\n    )\n}\n \nexport default PartyContainer;"]},"metadata":{},"sourceType":"module"}