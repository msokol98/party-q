{"ast":null,"code":"var _jsxFileName = \"/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js\";\nimport React, { Component } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport useFormatSong from 'hooks/useFormatSong';\n\nclass PartyContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentSong: JSON.parse(localStorage.getItem('currentSong')),\n      queue: []\n    };\n\n    this.getCurrentSong = () => {\n      const {\n        party\n      } = this.props;\n      const {\n        currentSong\n      } = this.state;\n      if (!party || !party.host) return;\n      axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          'Authorization': 'Bearer ' + party.host.token\n        }\n      }).then(response => {\n        const song = response.data.item;\n        song && (!currentSong || song.id !== currentSong.id) && this.changeCurrentSong(song);\n      });\n    };\n\n    this.changeCurrentSong = song => {\n      const {\n        party\n      } = this.props;\n      this.setState({\n        currentSong: song\n      }, () => song && localStorage.setItem('currentSong', JSON.stringify(song)));\n      axios.post(`${apiHost}/api/songs/current?partyId=${party.id}`, useFormatSong(song));\n    };\n\n    this.getQueue = () => {\n      axios.get(`${apiHost}/api/songs/all`, {\n        params: {\n          partyId: this.props.party.id\n        }\n      }).then(response => this.setState({\n        queue: response.data\n      }));\n    };\n\n    this.leaveParty = () => {\n      const {\n        party,\n        member\n      } = this.props;\n      axios.get(`${apiHost}`);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      party,\n      member\n    } = this.props;\n    if (member.id === party.host.id) ;\n    setInterval(this.getCurrentSong, 1000);\n    setInterval(this.getQueue, 1000);\n  }\n\n  render() {\n    const {\n      party,\n      member\n    } = this.props;\n    let {\n      queue\n    } = this.state;\n    queue.currentSongIdx = party.currentSongIdx;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Mobile, {\n      party: { ...party,\n        queue\n      },\n      member: member,\n      leaveParty: this.leaveParty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default PartyContainer;","map":{"version":3,"sources":["/home/mitchell/Projects/party-q/web/src/components/party/active/PartyContainer.js"],"names":["React","Component","Mobile","axios","apiHost","useFormatSong","PartyContainer","state","currentSong","JSON","parse","localStorage","getItem","queue","getCurrentSong","party","props","host","get","headers","token","then","response","song","data","item","id","changeCurrentSong","setState","setItem","stringify","post","getQueue","params","partyId","leaveParty","member","componentDidMount","setInterval","render","currentSongIdx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Mobile from './mobile';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport useFormatSong from 'hooks/useFormatSong';\n\nclass PartyContainer extends Component {\n\n    state = {currentSong: JSON.parse(localStorage.getItem('currentSong')), queue: []};\n\n    getCurrentSong = () => {\n\n        const { party } = this.props;\n        const { currentSong } = this.state;\n\n        if(!party || !party.host) return;\n\n        axios.get(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n            headers: {\n                'Authorization': 'Bearer ' + party.host.token\n            }\n        }).then(response => {\n            const song = response.data.item;\n            song && (!currentSong || song.id !== currentSong.id) && this.changeCurrentSong(song);\n        })\n    }\n\n    changeCurrentSong = song => {\n        const { party } = this.props;\n        this.setState({currentSong: song}, () => song && localStorage.setItem('currentSong', JSON.stringify(song)));\n        axios.post(`${apiHost}/api/songs/current?partyId=${party.id}`, useFormatSong(song));\n    }\n\n    getQueue = () => {\n        axios.get(`${apiHost}/api/songs/all`, { params: {partyId : this.props.party.id} })\n            .then(response => this.setState({queue: response.data}));\n    }\n\n    leaveParty = () => {\n        const { party, member } = this.props;\n        axios.get(`${apiHost}`)\n    }\n\n    componentDidMount() {\n        const { party, member } = this.props;\n\n        if(member.id === party.host.id);\n            setInterval(this.getCurrentSong, 1000);\n\n        setInterval(this.getQueue, 1000);\n    }\n      \n    render() {\n        const { party, member } = this.props;\n        let { queue } = this.state;\n\n        queue.currentSongIdx = party.currentSongIdx;\n\n        return(\n            <div>\n                <Mobile party={{...party, queue}} member={member} leaveParty={this.leaveParty}  />\n            </div>\n        )\n    }\n}\n \nexport default PartyContainer;"]},"metadata":{},"sourceType":"module"}